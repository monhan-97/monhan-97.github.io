"use strict";(self.webpackChunkhuangmh_blog=self.webpackChunkhuangmh_blog||[]).push([[9940],{2345:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Snipaste_2024-09-01_21-31-22-58aa2433272ce1b56c16f4d7f9d53add.png"},3881:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(8101);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},4133:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"NetWork/large-file-upload","title":"\u5927\u6587\u4ef6\u4e0a\u4f20","description":"\u5207\u7247\u4e0a\u4f20","source":"@site/docs/NetWork/large-file-upload.mdx","sourceDirName":"NetWork","slug":"/NetWork/large-file-upload","permalink":"/docs/NetWork/large-file-upload","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"mohan-97","lastUpdatedAt":1725212342000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u65ad\u70b9\u4e0b\u8f7d","permalink":"/docs/NetWork/resume-broken-download"},"next":{"title":"\u57df\u540d","permalink":"/docs/NetWork/domain"}}');var i=t(5105),r=t(3881);const a={},l="\u5927\u6587\u4ef6\u4e0a\u4f20",c={},o=[{value:"\u8bfb\u53d6\u6587\u4ef6",id:"\u8bfb\u53d6\u6587\u4ef6",level:2},{value:"JS \u5b9e\u73b0\u6587\u4ef6\u8bfb\u53d6",id:"js-\u5b9e\u73b0\u6587\u4ef6\u8bfb\u53d6",level:3},{value:"\u521b\u5efa\u6587\u4ef6\u5207\u7247",id:"\u521b\u5efa\u6587\u4ef6\u5207\u7247",level:2},{value:"\u4e0a\u4f20\u6587\u4ef6",id:"\u4e0a\u4f20\u6587\u4ef6",level:2},{value:"\u90e8\u7f72\u4e0a\u4f20\u670d\u52a1",id:"\u90e8\u7f72\u4e0a\u4f20\u670d\u52a1",level:2},{value:"\u670d\u52a1\u7aef\u6587\u4ef6\u5408\u5e76",id:"\u670d\u52a1\u7aef\u6587\u4ef6\u5408\u5e76",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\u5927\u6587\u4ef6\u4e0a\u4f20",children:"\u5927\u6587\u4ef6\u4e0a\u4f20"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"\u5207\u7247\u4e0a\u4f20",src:t(2345).A+"",width:"1456",height:"792"})}),"\n",(0,i.jsx)(n.h2,{id:"\u8bfb\u53d6\u6587\u4ef6",children:"\u8bfb\u53d6\u6587\u4ef6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<input type="file" />\n<button id="upload">\u70b9\u51fb\u4e0a\u4f20</button>\n<div style="width: 300px" id="progress"></div>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"js-\u5b9e\u73b0\u6587\u4ef6\u8bfb\u53d6",children:"JS \u5b9e\u73b0\u6587\u4ef6\u8bfb\u53d6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const input = document.querySelector("#file");\nconst upload = document.querySelector("#upload");\nconst progress = document.querySelector("#progress");\nlet file;\n\ninput.addEventListener("change", (e) => {\n  file = e.target.files[0];\n});\n\nupload.addEventListener("click", (e) => {\n  if (_.isNil(file)) {\n    alert("\u8bf7\u9009\u62e9\u6587\u4ef6");\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u521b\u5efa\u6587\u4ef6\u5207\u7247",children:"\u521b\u5efa\u6587\u4ef6\u5207\u7247"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const createChunkList = (file) => {\n  // \u6309\u71672MB\u7684\u5927\u5c0f\u5207\u7247\u6587\u4ef6\n  const chunkSize = 2 * 1024 * 1024;\n  const chunkList = [];\n  const chunks = Math.ceil(file.size / chunkSize);\n\n  for (let index = 0; index < chunks; index++) {\n    const start = index * chunkSize;\n    const end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n    chunkList.push(file.slice(start, end));\n  }\n\n  return chunkList;\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u4e0a\u4f20\u6587\u4ef6",children:"\u4e0a\u4f20\u6587\u4ef6"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const allSettledWithRetries = async (promises, retries = 5) => {\n  const result = await Promise.allSettled(promises);\n\n  const successResponses = [];\n  result.forEach((item) => {\n    if (item.status === "fulfilled") {\n      successResponses.push(item.value);\n    }\n  });\n\n  if (retries > 0 && successResponses.length !== promises.length) {\n    const failedPromises = [];\n    result.forEach((item, index) => {\n      if (item.status === "rejected") {\n        failedPromises.push(promises[index]);\n      }\n    });\n\n    await new Promise((resolve) => setTimeout(resolve, 3000));\n\n    const failedResults = await allSettledWithRetries(\n      failedPromises,\n      retries - 1\n    );\n\n    failedResults.forEach((promiseResult) => {\n      if (promiseResult.status === "fulfilled") {\n        successResponses.push(promiseResult.value);\n      }\n    });\n  }\n\n  return successResponses;\n};\n\nupload.addEventListener("click", async (e) => {\n  if (_.isNil(file)) {\n    alert("\u8bf7\u9009\u62e9\u6587\u4ef6");\n  }\n\n  const chunkList = createChunkList(file);\n\n  const fileList = await allSettledWithRetries(\n    chunkList.map((item) => {\n      const formData = new FormData();\n      formData.append("file", item.file); //\u8be5\u6587\u4ef6\n      formData.append("fileName", item.fileName); //\u6587\u4ef6\u540d\n      formData.append("chunkName", item.chunkName); //\u5207\u7247\u540d\n      return fetch("http://127.0.0.1:8000/upload", {\n        method: "POST",\n        body: formData,\n      });\n    }),\n    5\n  );\n\n  if (fileList.length === chunkList.length) {\n    await fetch("http://127.0.0.1:8000/merge", {\n      method: "POST",\n      body: JSON.stringify({\n        fileName: file.name,\n        size: file.size,\n      }),\n    });\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u90e8\u7f72\u4e0a\u4f20\u670d\u52a1",children:"\u90e8\u7f72\u4e0a\u4f20\u670d\u52a1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const http = require("http");\nconst multiparty = require("multiparty"); // \u4e2d\u95f4\u4ef6\uff0c\u5904\u7406FormData\u5bf9\u8c61\u7684\u4e2d\u95f4\u4ef6\nconst path = require("path");\nconst fse = require("fs-extra"); //\u6587\u4ef6\u5904\u7406\u6a21\u5757\nconst server = http.createServer();\nconst UPLOAD_DIR = path.resolve(__dirname, ".", "qiepian"); // \u8bfb\u53d6\u6839\u76ee\u5f55\uff0c\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939qiepian\u5b58\u653e\u5207\u7247\n\nserver.on("request", async (req, res) => {\n  // \u5904\u7406\u8de8\u57df\u95ee\u9898\uff0c\u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u5934\u548c\u8bf7\u6c42\u6e90\n  res.setHeader("Access-Control-Allow-Origin", "*");\n  res.setHeader("Access-Control-Allow-Headers", "*");\n\n  if (req.url === "/upload") {\n    //\u524d\u7aef\u8bbf\u95ee\u7684\u5730\u5740\u6b63\u786e\n    const multipart = new multiparty.Form(); // \u89e3\u6790FormData\u5bf9\u8c61\n    multipart.parse(req, async (err, fields, files) => {\n      if (err) {\n        //\u89e3\u6790\u5931\u8d25\n        return;\n      }\n      console.log("fields=", fields);\n      console.log("files=", files);\n\n      const [file] = files.file;\n      const [fileName] = fields.fileName;\n      const [chunkName] = fields.chunkName;\n\n      const chunkDir = path.resolve(UPLOAD_DIR, `${fileName}-chunks`); //\u5728qiepian\u6587\u4ef6\u5939\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u5939\uff0c\u5b58\u653e\u63a5\u6536\u5230\u7684\u6240\u6709\u5207\u7247\n      if (!fse.existsSync(chunkDir)) {\n        //\u6587\u4ef6\u5939\u4e0d\u5b58\u5728\uff0c\u65b0\u5efa\u8be5\u6587\u4ef6\u5939\n        await fse.mkdirs(chunkDir);\n      }\n      // \u628a\u5207\u7247\u79fb\u52a8\u8fdbchunkDir\n      await fse.move(file.path, `${chunkDir}/${chunkName}`);\n      res.end(\n        JSON.stringify({\n          //\u5411\u524d\u7aef\u8f93\u51fa\n          code: 0,\n          message: "\u5207\u7247\u4e0a\u4f20\u6210\u529f",\n        })\n      );\n    });\n  }\n});\n\nserver.listen(8000, () => {\n  console.log("8000\u7aef\u53e3 \u670d\u52a1\u5df2\u542f\u52a8");\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u670d\u52a1\u7aef\u6587\u4ef6\u5408\u5e76",children:"\u670d\u52a1\u7aef\u6587\u4ef6\u5408\u5e76"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'if (req.url === "/merge") {\n  // \u8be5\u53bb\u5408\u5e76\u5207\u7247\u4e86\n  const data = await resolvePost(req);\n  const { fileName, size } = data;\n  const filePath = path.resolve(UPLOAD_DIR, fileName); //\u83b7\u53d6\u5207\u7247\u8def\u5f84\n  await mergeFileChunk(filePath, fileName, size);\n  res.end(\n    JSON.stringify({\n      code: 0,\n      message: "\u6587\u4ef6\u5408\u5e76\u6210\u529f",\n    })\n  );\n}\n// \u5408\u5e76\nasync function mergeFileChunk(filePath, fileName, size) {\n  const chunkDir = path.resolve(UPLOAD_DIR, `${fileName}-chunks`);\n  let chunkPaths = await fse.readdir(chunkDir);\n  chunkPaths.sort((a, b) => a.split("-")[1] - b.split("-")[1]);\n  const arr = chunkPaths.map((chunkPath, index) => {\n    return pipeStream(\n      path.resolve(chunkDir, chunkPath),\n      // \u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u521b\u5efa\u53ef\u5199\u6d41\n      fse.createWriteStream(filePath, {\n        start: index * size,\n        end: (index + 1) * size,\n      })\n    );\n  });\n  await Promise.all(arr); //\u4fdd\u8bc1\u6240\u6709\u7684\u5207\u7247\u90fd\u88ab\u8bfb\u53d6\n}\n// \u5c06\u5207\u7247\u8f6c\u6362\u6210\u6d41\u8fdb\u884c\u5408\u5e76\nfunction pipeStream(path, writeStream) {\n  return new Promise((resolve) => {\n    // \u521b\u5efa\u53ef\u8bfb\u6d41\uff0c\u8bfb\u53d6\u6240\u6709\u5207\u7247\n    const readStream = fse.createReadStream(path);\n    readStream.on("end", () => {\n      fse.unlinkSync(path); // \u8bfb\u53d6\u5b8c\u6bd5\u540e\uff0c\u5220\u9664\u5df2\u7ecf\u8bfb\u53d6\u8fc7\u7684\u5207\u7247\u8def\u5f84\n      resolve();\n    });\n    readStream.pipe(writeStream); //\u5c06\u53ef\u8bfb\u6d41\u6d41\u5165\u53ef\u5199\u6d41\n  });\n}\n// \u89e3\u6790POST\u8bf7\u6c42\u4f20\u9012\u7684\u53c2\u6570\nfunction resolvePost(req) {\n  // \u89e3\u6790\u53c2\u6570\n  return new Promise((resolve) => {\n    let chunk = "";\n    req.on("data", (data) => {\n      //req\u63a5\u6536\u5230\u4e86\u524d\u7aef\u7684\u6570\u636e\n      chunk += data; //\u5c06\u63a5\u6536\u5230\u7684\u6240\u6709\u53c2\u6570\u8fdb\u884c\u62fc\u63a5\n    });\n    req.on("end", () => {\n      resolve(JSON.parse(chunk)); //\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3aJSON\u5bf9\u8c61\n    });\n  });\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);